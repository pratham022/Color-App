[{"/home/prathamesh/REACT_/Colors-Project/colors-app/src/App.js":"1","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/sizes.js":"2","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteStyles.js":"3","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/DraggableColorBoxStyles.js":"4","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteFooterStyles.js":"5","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/NewPaletteFormStyles.js":"6","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteFormNavStyles.js":"7","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteListStyles.js":"8","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/ColorBoxStyles.js":"9","/home/prathamesh/REACT_/Colors-Project/colors-app/src/Page.js":"10","/home/prathamesh/REACT_/Colors-Project/colors-app/src/PaletteMetaForm.js":"11"},{"size":3833,"mtime":1609751825171,"results":"12","hashOfConfig":"13"},{"size":758,"mtime":1609590790374,"results":"14","hashOfConfig":"13"},{"size":855,"mtime":1609169550354,"results":"15","hashOfConfig":"13"},{"size":1040,"mtime":1609590211540,"results":"16","hashOfConfig":"13"},{"size":296,"mtime":1609580045488,"results":"17","hashOfConfig":"13"},{"size":1230,"mtime":1609580422068,"results":"18","hashOfConfig":"13"},{"size":963,"mtime":1609570037132,"results":"19","hashOfConfig":"13"},{"size":1635,"mtime":1609685449525,"results":"20","hashOfConfig":"13"},{"size":743,"mtime":1609586438431,"results":"21","hashOfConfig":"13"},{"size":157,"mtime":1609752121003,"results":"22","hashOfConfig":"13"},{"size":3872,"mtime":1609752217848,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1vc23ne",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"/home/prathamesh/REACT_/Colors-Project/colors-app/src/App.js",["49"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/sizes.js",["50"],"// // Extra small devices (portrait phones, less than 576px)\n// // No media query for `xs` since this is the default in Bootstrap\n\n// // Small devices (landscape phones, 576px and up)\n// @media (min-width: 576px) { ... }\n\n// // Medium devices (tablets, 768px and up)\n// @media (min-width: 768px) { ... }\n\n// // Large devices (desktops, 992px and up)\n// @media (min-width: 992px) { ... }\n\n// // Extra large devices (large desktops, 1200px and up)\n// @media (min-width: 1200px) { ... }\n\nexport default {\n    up() {\n\n    },\n    down(size) {\n        const sizes = {\n            xs: \"576px\",\n            sm: \"768px\",\n            md: \"992px\",\n            lg: \"1200px\",\n            xl: '1600px'\n        }\n        return `@media (max-width: ${sizes[size]})`;\n    }\n}","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteStyles.js",["51"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/DraggableColorBoxStyles.js",[],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteFooterStyles.js",["52"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/NewPaletteFormStyles.js",[],["53","54"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteFormNavStyles.js",[],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/PaletteListStyles.js",["55"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/ColorBoxStyles.js",["56","57"],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/Page.js",[],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/PaletteMetaForm.js",["58","59"],"import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nclass PaletteMetaForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            newPaletteName: '',\n            stage: 'form',\n        }\n        this.showEmojiPicker = this.showEmojiPicker.bind(this);\n        this.savePalette = this.savePalette.bind(this);\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule('isPaletteNameUnique', value => (\n            this.props.palettes.every(currPalette => (\n                currPalette.paletteName.toLowerCase() !== value.toLowerCase()\n            ))\n        ));\n    }\n    handleChange = (evt) => {\n        this.setState({\n          [evt.target.name]: evt.target.value\n        });\n    }\n    showEmojiPicker() {\n        this.setState({\n            stage: 'emoji'\n        })\n    }\n    savePalette(newEmoji) {\n        \n        const newPalette = {paletteName: this.state.newPaletteName, emoji: newEmoji.native};\n        this.props.handleSubmit(newPalette);\n        this.setState({\n            stage: ''\n        })\n    }\n\n    render() { \n        const { newPaletteName } = this.state;\n        const {handleClose, open} = this.props;\n        return ( \n            <div>\n                <Dialog open={open && this.state.stage === 'emoji'} onClose={handleClose}>\n                <DialogTitle id=\"form-dialog-title\">Pick a Palette Emoji</DialogTitle>\n                    <Picker onSelect={this.savePalette} title='Pick a Palette Emoji'/>\n                </Dialog>\n                <Dialog open={open && this.state.stage === 'form'} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Choose a Palette Name</DialogTitle>\n                    <ValidatorForm onSubmit={this.showEmojiPicker}>\n                        <DialogContent>\n                            <DialogContentText>\n                                PLease enter a name for your new beautiful palette. Make sure it's unique!\n                            </DialogContentText>\n                        \n                            <TextValidator \n                                label='Palette Name' \n                                value={this.state.newPaletteName} \n                                name='newPaletteName' \n                                onChange={this.handleChange} \n                                fullWidth\n                                margin='normal'\n                                validators={['required', 'isPaletteNameUnique']} \n                                errorMessages={['Enter Palette Name', 'Palette Name already used']}/>\n                        \n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleClose} color=\"primary\">\n                                Cancel\n                            </Button>\n                            <Button\n                                variant='contained' \n                                color='primary' \n                                type='submit'>\n                                    Save Palette\n                            </Button>\n                        </DialogActions>\n                    </ValidatorForm>\n                </Dialog>\n            </div>\n        );\n    }\n}\n \nexport default PaletteMetaForm;",{"ruleId":"60","severity":1,"message":"61","line":42,"column":66,"nodeType":"62","messageId":"63","endLine":42,"endColumn":68},{"ruleId":"64","severity":1,"message":"65","line":16,"column":1,"nodeType":"66","endLine":30,"endColumn":2},{"ruleId":"64","severity":1,"message":"65","line":1,"column":1,"nodeType":"66","endLine":29,"endColumn":2},{"ruleId":"64","severity":1,"message":"65","line":1,"column":1,"nodeType":"66","endLine":14,"endColumn":2},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"64","severity":1,"message":"65","line":4,"column":1,"nodeType":"66","endLine":69,"endColumn":3},{"ruleId":"71","severity":1,"message":"72","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":13},{"ruleId":"64","severity":1,"message":"65","line":4,"column":1,"nodeType":"66","endLine":24,"endColumn":2},{"ruleId":"71","severity":1,"message":"75","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":17},{"ruleId":"71","severity":1,"message":"76","line":50,"column":17,"nodeType":"73","messageId":"74","endLine":50,"endColumn":31},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'sizes' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'newPaletteName' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]