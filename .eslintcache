[{"/home/prathamesh/REACT_/Colors-Project/colors-app/src/App.js":"1","/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/NewPaletteFormStyles.js":"2","/home/prathamesh/REACT_/Colors-Project/colors-app/src/NewPaletteForm.js":"3"},{"size":4431,"mtime":1609757036998,"results":"4","hashOfConfig":"5"},{"size":1230,"mtime":1609580422068,"results":"6","hashOfConfig":"5"},{"size":4615,"mtime":1609757358545,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vc23ne",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/prathamesh/REACT_/Colors-Project/colors-app/src/App.js",[],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/styles/NewPaletteFormStyles.js",[],"/home/prathamesh/REACT_/Colors-Project/colors-app/src/NewPaletteForm.js",["15"],"import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport Button from \"@material-ui/core/Button\";\nimport { arrayMove } from 'react-sortable-hoc';\n\nimport DraggableColorList from './DraggableColorList';\nimport PaletteFormNav from './PaletteFormNav';\nimport ColorPickerForm from './ColorPickerForm';\nimport styles from './styles/NewPaletteFormStyles';\nimport seedColors from './seedColors';\n\n\n\nclass NewPaletteForm extends Component {\n  static defaultProps = {\n    maxColors: 20\n  }\n  state = {\n    open: true,\n    colors: seedColors[0].colors,\n  };\n\n\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false });\n  };\n\n  addNewColor = (newColor) => {\n      this.setState({\n          colors: [...this.state.colors, newColor],\n      })\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n    // this.setState({\n    //     newColorName: evt.target.value\n    // })\n  }\n\n  handleSubmit = (newPalette) => {\n    newPalette.id = newPalette.paletteName.toLowerCase().replace(/ /g, '-');\n    newPalette.colors = this.state.colors;\n    this.props.savePalette(newPalette);\n    this.props.history.push('/');\n  }\n\n  removeColor = (colorName) => {\n      this.setState({\n        colors: this.state.colors.filter(color => color.name !== colorName)\n      });\n  }\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    this.setState(({colors}) => ({\n      colors: arrayMove(colors, oldIndex, newIndex),\n    }));\n  };\n\n  clearColors = () => {\n    this.setState({\n      colors: []\n    })\n  }\n  addRandomColor = () => {\n    const allColors = this.props.palettes.map(palette => palette.colors).flat();\n    let rand = Math.floor(Math.random() * allColors.length);\n    let randomColor = allColors[rand];\n    let isDuplicateColor = true;\n    while(isDuplicateColor) {\n      rand = Math.floor(Math.random() * allColors.length);\n      randomColor = allColors[rand];\n      isDuplicateColor = this.state.colors.some(color => color.name === randomColor.name);\n    }\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    })\n  }\n\n  render() {\n    const { classes, maxColors, palettes } = this.props;\n    const { open, colors } = this.state;\n\n    const paletteIsFull = colors.length >= maxColors;\n\n    return (\n      <div className={classes.root} style={{background: 'white'}}>\n        <PaletteFormNav \n          open={open} \n          palettes={palettes} \n          handleSubmit={this.handleSubmit} \n          handleDrawerOpen={this.handleDrawerOpen}/>\n        <Drawer\n          className={classes.drawer}\n          variant='persistent'\n          anchor='left'\n          open={open}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={this.handleDrawerClose}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <div className={classes.container}>\n            <Typography variant='h4' gutterBottom>Design Your Palette</Typography>\n            <div className={classes.buttons}>\n              <Button \n                variant='contained' \n                color='secondary' \n                className={classes.button}\n                onClick={this.clearColors}>CLEAR PALETTE</Button>\n              <Button \n                variant='contained' \n                color='primary' \n                className={classes.button}\n                onClick={this.addRandomColor}>RANDOM COLOR</Button>\n            </div>\n            <ColorPickerForm \n              paletteIsFull={paletteIsFull} \n              addNewColor={this.addNewColor}\n              colors={colors}/>\n          </div>\n        </Drawer>\n        <main\n          className={classNames(classes.content, {\n            [classes.contentShift]: open\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <DraggableColorList \n            onSortEnd={this.onSortEnd}\n            colors={this.state.colors} \n            removeColor={this.removeColor} \n            axis='xy' \n            distance={20}/>\n        </main>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);",{"ruleId":"16","severity":1,"message":"17","line":86,"column":49,"nodeType":"18","messageId":"19","endLine":86,"endColumn":89},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'randomColor'.","ArrowFunctionExpression","unsafeRefs"]